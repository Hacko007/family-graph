<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<?xml-stylesheet href="assets/defaultStyle.css" type="text/css"?>
<svg xmlns:svg="http://www.w3.org/2000/svg"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version="1.1"
     baseProfile="full"
     style="background-color:antiquewhite"
     viewbox='0 0 1000 1000'
     onload="init(evt)">


    <script href="src/PathHelper.js"></script>
    <script href="src/box.js"></script>
    <script href="src/Relation.js"></script>
    <script href="src/Person.js"></script>
    <script href="src/personBox.js"></script>

    <script type="text/ecmascript">
        <![CDATA[
        var dx = 0;
        var dy = 0;
        var transMatrix = [1, 0, 0, 1, 0, 0];
        var mapMatrix;

        function init() {

        window.addEventListener("mousedown", mousedown_listener, false);
        window.addEventListener('mousewheel', mouseWheel_listener, false); // IE9, Chrome, Safari, Opera
        window.addEventListener("DOMMouseScroll", mouseWheel_listener, false); // firefox
        window.addEventListener("mouseup", mouseup_listener, true);

        mapMatrix = document.getElementById("map-matrix");

        let main = document.getElementById("main-svg");

        var p1 = new Person(1, "Adam", "A", Gender.Male, null, new Date(1, 1, 1, 1, 1, 1, 1), null);
        var p2 = new Person(2, "Eve", "E", Gender.Female, null, new Date(2, 1, 1, 1, 1, 1, 1), null);
        var r1 = new Relation(p1, p2, null);

        var p3 = new Person(3, "Rambo", "I", Gender.Male, null, new Date(1980, 1, 1, 1, 1, 1, 1), null);
        var p4 = new Person(4, "Rambo", "II", Gender.Male, null, new Date(1990, 1, 1, 1, 1, 1, 1), null);
        var p5 = new Person(5, "Rambo", "III", Gender.Male, null, new Date(1995, 1, 1, 1, 1, 1, 1), null);
        var p6 = new Person(6, "Rambo", "IV", Gender.Male, null, new Date(1997, 1, 1, 1, 1, 1, 1), null);
        var p7 = new Person(7, "Rambo", "V", Gender.Male, null, new Date(2000, 1, 1, 1, 1, 1, 1), null);
        r1.addChildren({ p3, p4, p5, p6, p7 });

        var p8 = new Person(8, "Ana", "IV", Gender.Female, null, new Date(1997, 1, 1, 1, 1, 1, 1), null);        
        var r2 = new Relation(p6, p8, null);
        var p9 = new Person(9, "Rocky", "I", Gender.Male, null, new Date(2015, 1, 1, 1, 1, 1, 1), null);
        r2.addChildren({ p9 });

        let box = new PersonBox(p1);
        box.x = 600;
        box.y = 300;

        var v = box.createBaseTree();
        v.forEach(e => mapMatrix.appendChild(e));

        console.log(box.familyLeft);

        pan(box.familyLeft + 10, 0);


        }



        function pan(dx, dy) {
        try {
        transMatrix[4] += dx;
        transMatrix[5] += dy;

        var newMatrix = "matrix(" + transMatrix.join(' ') + ")";
        mapMatrix.setAttributeNS(null, "transform", newMatrix);
        } catch (err) { }
        }

        function zoom(scale) {
        try {
        for (var i = 0; i < transMatrix.length; i++) {
        transMatrix[i] *= scale;
        }

        transMatrix[4] += (1 - scale) * width / 2;
        transMatrix[5] += (1 - scale) * height / 2;

        var newMatrix = "matrix(" + transMatrix.join(' ') + ")";
        mapMatrix.setAttributeNS(null, "transform", newMatrix);
        } catch (err) { }
        }


        function mousedown_listener(evt)
        {
        dx = evt.clientX;
        dy = evt.clientY;
        window.addEventListener("mousemove", mousemove_listener, true);
        window.addEventListener("mouseup", mouseup_listener, true);
        }

        function mouseup_listener(evt)
        {
        window.removeEventListener("mousemove", mousemove_listener, true);
        window.removeEventListener("mouseup", mouseup_listener, true);
        }

        function mousemove_listener(evt)
        {
        pan(evt.clientX - dx, evt.clientY - dy)
        dx = evt.clientX;
        dy = evt.clientY;
        }

        function mouseWheel_listener(evt) {
        //var delta = evt.wheelDelta / 1800;

        var delta = Math.max(-1, Math.min(1, (evt.wheelDelta / 1800 || -(evt.detail/1800))));
        var z = 1 + delta;
        console.log("wheel:" + z + " - delta:"+ evt.wheelDelta  + " - detail:" + evt.detail);
        zoom(z);
        }

        ]]>
    </script>

    <g id="map-matrix" transform="matrix(1 0 0 1 0 0)" style="cursor: move;"></g>


    <rect x="30" y="50" width="20" height="20" onclick="zoom(0.8)" style="fill:#6699FF;stroke:gray; cursor:zoom-out" />
    <!--<text x="35" y="65" style="font-size:30px; ">-</text>-->

    <rect x="30" y="20" width="20" height="20" onclick="zoom(1.25)" style="fill:#6699FF;stroke:gray; cursor:zoom-in" />
    <!--<text x="32" y="40" style="font-size:30px; ">+</text>-->
</svg>